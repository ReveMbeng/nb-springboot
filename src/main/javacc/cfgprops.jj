options {
    STATIC = false;
    LOOKAHEAD = 2;
}


PARSER_BEGIN(BootCfgParser)
package com.github.alexfalappa.nbspringboot.cfgeditor.parser;

public class BootCfgParser {

    public BootCfgParser() {}
}
PARSER_END(BootCfgParser)



// terminals
TOKEN: {
    <WHITESPACE: " "|"\t"|"\f"> |
    <EOL: "\n"|"\r"|"\r\n"> |
// key-value separators
    <EQUAL: "="> |
    <COLON: ":"> |
// other meaningful chars in Spring Boot key syntax
    <DOT: "."> |
    <OPENBRACKET: "["> |
    <CLOSEBRACKET: "]">
}

// comments
TOKEN: {
    <COMMENT: ["#","!"] (~["\n","\r"])* >
}

// numeric literals
TOKEN: {
    <#DIGIT: ["0" - "9"] > |
    <#NONZERO_DIGIT: ["1" - "9"] >
}

// integers
TOKEN: {
    <INTEGER: (<DIGIT> | <NONZERO_DIGIT> <DIGITS>) > |
    <DIGITS: (<DIGIT>)+ >
}


// string literals
TOKEN: {
    <STRING: (<ALLOWABLE_CHARACTERS>)+ > |
    <ALLOWABLE_CHARACTERS: (~["\\", "\u0000"-"\u001f"]) >
}

void parse() :
{}
{
    ( kvPair() | <COMMENT> | (<WHITESPACE>)+ | <EOL> )* <EOF>
    {
    }
}

void kvPair() :
{}
{
     key() (<WHITESPACE>)* (<EQUAL>|<COLON>) (<WHITESPACE>)* value()
}

void key() :
{}
{
    <STRING> ( <DOT> <STRING>)* ( <OPENBRACKET> <INTEGER> <CLOSEBRACKET> )?
}


void value() :
{}
{
    <STRING>
}
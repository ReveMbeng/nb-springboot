/* BootCfgParser.java */
 /* Generated By:JavaCC: Do not edit this line. BootCfgParser.java */
package com.github.alexfalappa.nbspringboot.cfgeditor.jcc;

import java.util.Properties;

public class BootCfgParser implements BootCfgParserConstants {

    private Properties parsedProps = new Properties();

    public Properties getParsedProps() {
        return parsedProps;
    }

    private String uniToStr(String str) {
        int codePoint = Integer.parseInt(str.substring(2), 16);
        return new String(Character.toChars(codePoint));
    }

    final public void parse() throws ParseException {
        trace_call("parse");
        try {
            label_1:
            while (true) {
                if (jj_2_1(2)) {
                    ;
                } else {
                    break label_1;
                }
                if (jj_2_2(2)) {
                    keySepValue();
                } else if (jj_2_3(2)) {
                    comment();
                } else if (jj_2_4(2)) {
                    empty();
                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
            }
            jj_consume_token(0);
        } finally {
            trace_return("parse");
        }
    }

    final private void keySepValue() throws ParseException {
        trace_call("keySepValue");
        try {
            String k, v = "";
            k = key();
            label_2:
            while (true) {
                if (jj_2_5(2)) {
                    ;
                } else {
                    break label_2;
                }
                jj_consume_token(KEY_WHITESPACE);
            }
            if (jj_2_10(2)) {
                jj_consume_token(KEY_EOL);
            } else {
                if (jj_2_9(2)) {
                    jj_consume_token(KEY_SEPARATOR);
                    label_3:
                    while (true) {
                        if (jj_2_6(2)) {
                            ;
                        } else {
                            break label_3;
                        }
                        jj_consume_token(SEP_WHITESPACE);
                    }
                    if (jj_2_8(2)) {
                        v = value();
                        if (jj_2_7(2)) {
                            jj_consume_token(VAL_EOL);
                        } else {
                            ;
                        }
                    } else {
                        ;
                    }
                } else {
                    ;
                }
            }
            parsedProps.put(k, v);
        } finally {
            trace_return("keySepValue");
        }
    }

    final private String key() throws ParseException {
        trace_call("key");
        try {
            Token t;
            StringBuilder sb = new StringBuilder();
            t = jj_consume_token(KEY_START);
            sb.append(t.image);
            label_4:
            while (true) {
                if (jj_2_11(2)) {
                    ;
                } else {
                    break label_4;
                }
                allowedKey(sb);
            }
            label_5:
            while (true) {
                if (jj_2_12(2)) {
                    ;
                } else {
                    break label_5;
                }
                t = jj_consume_token(KEY_DOT);
                sb.append(t.image);
                label_6:
                while (true) {
                    allowedKey(sb);
                    if (jj_2_13(2)) {
                        ;
                    } else {
                        break label_6;
                    }
                }
            }
            if (jj_2_14(2)) {
                jj_consume_token(KEY_OBRACKET);
                t = jj_consume_token(KEY_INTEGER);
                jj_consume_token(KEY_CBRACKET);
                sb.append('[').append(t.image).append(']');
            } else {
                ;
            }
            {
                if ("" != null) {
                    return sb.toString();
                }
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("key");
        }
    }

    final private void allowedKey(StringBuilder sb) throws ParseException {
        trace_call("allowedKey");
        try {
            Token t;
            if (jj_2_15(2)) {
                t = jj_consume_token(KEY_ESC_BACKSLASH);
                sb.append('\\');
            } else if (jj_2_16(2)) {
                t = jj_consume_token(KEY_ESC_UNICODE);
                sb.append(uniToStr(t.image));
            } else if (jj_2_17(2)) {
                t = jj_consume_token(KEY_ESC_SPACE);
                sb.append(' ');
            } else if (jj_2_18(2)) {
                t = jj_consume_token(KEY_ESC_LF);
                sb.append('\n');
            } else if (jj_2_19(2)) {
                t = jj_consume_token(KEY_ESC_TAB);
                sb.append('\t');
            } else if (jj_2_20(2)) {
                t = jj_consume_token(KEY_ESC_EQUAL);
                sb.append("=");
            } else if (jj_2_21(2)) {
                t = jj_consume_token(KEY_ESC_COLON);
                sb.append(':');
            } else if (jj_2_22(2)) {
                t = jj_consume_token(KEY_ESC_POUND);
                sb.append('#');
            } else if (jj_2_23(2)) {
                t = jj_consume_token(KEY_ESC_EXCL);
                sb.append('!');
            } else if (jj_2_24(2)) {
                t = jj_consume_token(KEY_INTEGER);
                sb.append(t.image);
            } else if (jj_2_25(2)) {
                t = jj_consume_token(KEY_CHAR);
                sb.append(t.image);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
        } finally {
            trace_return("allowedKey");
        }
    }

    final private String value() throws ParseException {
        trace_call("value");
        try {
            Token t;
            StringBuilder sb = new StringBuilder();
            if (jj_2_26(2)) {
                t = jj_consume_token(VAL_START);
            } else if (jj_2_27(2)) {
                t = jj_consume_token(SEP_VAL_START);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            sb.append(t.image);
            label_7:
            while (true) {
                if (jj_2_28(2)) {
                    ;
                } else {
                    break label_7;
                }
                allowedVal(sb);
            }
            if (jj_2_31(2)) {
                jj_consume_token(VAL_ESC_EOL);
                label_8:
                while (true) {
                    if (jj_2_29(2)) {
                        ;
                    } else {
                        break label_8;
                    }
                    jj_consume_token(VAL_WHITESPACE);
                }
                label_9:
                while (true) {
                    if (jj_2_30(2)) {
                        ;
                    } else {
                        break label_9;
                    }
                    allowedVal(sb);
                }
            } else {
                ;
            }
            {
                if ("" != null) {
                    return sb.toString();
                }
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("value");
        }
    }

    final private void allowedVal(StringBuilder sb) throws ParseException {
        trace_call("allowedVal");
        try {
            Token t;
            if (jj_2_32(2)) {
                t = jj_consume_token(VAL_ESC_BACKSLASH);
                sb.append('\\');
            } else if (jj_2_33(2)) {
                t = jj_consume_token(VAL_ESC_SPACE);
                sb.append(' ');
            } else if (jj_2_34(2)) {
                t = jj_consume_token(VAL_ESC_LF);
                sb.append('\n');
            } else if (jj_2_35(2)) {
                t = jj_consume_token(VAL_ESC_TAB);
                sb.append('\t');
            } else if (jj_2_36(2)) {
                t = jj_consume_token(VAL_ESC_EQUAL);
                sb.append('=');
            } else if (jj_2_37(2)) {
                t = jj_consume_token(VAL_ESC_COLON);
                sb.append(':');
            } else if (jj_2_38(2)) {
                t = jj_consume_token(VAL_ESC_POUND);
                sb.append('#');
            } else if (jj_2_39(2)) {
                t = jj_consume_token(VAL_ESC_EXCL);
                sb.append('!');
            } else if (jj_2_40(2)) {
                t = jj_consume_token(VAL_ESC_MALFORMED);
                sb.append(t.image.substring(1));
            } else if (jj_2_41(2)) {
                t = jj_consume_token(VAL_ESC_UNICODE);
                sb.append(uniToStr(t.image));
            } else if (jj_2_42(2)) {
                t = jj_consume_token(VAL_WHITESPACE);
                sb.append(t.image);
            } else if (jj_2_43(2)) {
                t = jj_consume_token(VAL_CHAR);
                sb.append(t.image);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
        } finally {
            trace_return("allowedVal");
        }
    }

    final private void comment() throws ParseException {
        trace_call("comment");
        try {
            jj_consume_token(COMMENT_START);
            label_10:
            while (true) {
                if (jj_2_44(2)) {
                    ;
                } else {
                    break label_10;
                }
                jj_consume_token(COMMENT_CHAR);
            }
            if (jj_2_45(2)) {
                jj_consume_token(COMMENT_EOL);
            } else {
                ;
            }
        } finally {
            trace_return("comment");
        }
    }

    final private void empty() throws ParseException {
        trace_call("empty");
        try {
            label_11:
            while (true) {
                if (jj_2_46(2)) {
                    jj_consume_token(WHITESPACE);
                } else if (jj_2_47(2)) {
                    jj_consume_token(EOL);
                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                if (jj_2_48(2)) {
                    ;
                } else {
                    break label_11;
                }
            }
        } finally {
            trace_return("empty");
        }
    }

    private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_1();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(0, xla);
        }
    }

    private boolean jj_2_2(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_2();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(1, xla);
        }
    }

    private boolean jj_2_3(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_3();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(2, xla);
        }
    }

    private boolean jj_2_4(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_4();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(3, xla);
        }
    }

    private boolean jj_2_5(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_5();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(4, xla);
        }
    }

    private boolean jj_2_6(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_6();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(5, xla);
        }
    }

    private boolean jj_2_7(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_7();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(6, xla);
        }
    }

    private boolean jj_2_8(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_8();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(7, xla);
        }
    }

    private boolean jj_2_9(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_9();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(8, xla);
        }
    }

    private boolean jj_2_10(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_10();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(9, xla);
        }
    }

    private boolean jj_2_11(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_11();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(10, xla);
        }
    }

    private boolean jj_2_12(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_12();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(11, xla);
        }
    }

    private boolean jj_2_13(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_13();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(12, xla);
        }
    }

    private boolean jj_2_14(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_14();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(13, xla);
        }
    }

    private boolean jj_2_15(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_15();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(14, xla);
        }
    }

    private boolean jj_2_16(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_16();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(15, xla);
        }
    }

    private boolean jj_2_17(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_17();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(16, xla);
        }
    }

    private boolean jj_2_18(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_18();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(17, xla);
        }
    }

    private boolean jj_2_19(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_19();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(18, xla);
        }
    }

    private boolean jj_2_20(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_20();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(19, xla);
        }
    }

    private boolean jj_2_21(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_21();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(20, xla);
        }
    }

    private boolean jj_2_22(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_22();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(21, xla);
        }
    }

    private boolean jj_2_23(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_23();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(22, xla);
        }
    }

    private boolean jj_2_24(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_24();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(23, xla);
        }
    }

    private boolean jj_2_25(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_25();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(24, xla);
        }
    }

    private boolean jj_2_26(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_26();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(25, xla);
        }
    }

    private boolean jj_2_27(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_27();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(26, xla);
        }
    }

    private boolean jj_2_28(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_28();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(27, xla);
        }
    }

    private boolean jj_2_29(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_29();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(28, xla);
        }
    }

    private boolean jj_2_30(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_30();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(29, xla);
        }
    }

    private boolean jj_2_31(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_31();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(30, xla);
        }
    }

    private boolean jj_2_32(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_32();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(31, xla);
        }
    }

    private boolean jj_2_33(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_33();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(32, xla);
        }
    }

    private boolean jj_2_34(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_34();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(33, xla);
        }
    }

    private boolean jj_2_35(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_35();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(34, xla);
        }
    }

    private boolean jj_2_36(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_36();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(35, xla);
        }
    }

    private boolean jj_2_37(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_37();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(36, xla);
        }
    }

    private boolean jj_2_38(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_38();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(37, xla);
        }
    }

    private boolean jj_2_39(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_39();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(38, xla);
        }
    }

    private boolean jj_2_40(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_40();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(39, xla);
        }
    }

    private boolean jj_2_41(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_41();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(40, xla);
        }
    }

    private boolean jj_2_42(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_42();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(41, xla);
        }
    }

    private boolean jj_2_43(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_43();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(42, xla);
        }
    }

    private boolean jj_2_44(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_44();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(43, xla);
        }
    }

    private boolean jj_2_45(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_45();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(44, xla);
        }
    }

    private boolean jj_2_46(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_46();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(45, xla);
        }
    }

    private boolean jj_2_47(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_47();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(46, xla);
        }
    }

    private boolean jj_2_48(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_48();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(47, xla);
        }
    }

    private boolean jj_3R_15() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_26()) {
            jj_scanpos = xsp;
            if (jj_3_27()) {
                return true;
            }
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_28()) {
                jj_scanpos = xsp;
                break;
            }
        }
        xsp = jj_scanpos;
        if (jj_3_31()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3_25() {
        if (jj_scan_token(KEY_CHAR)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_24() {
        if (jj_scan_token(KEY_INTEGER)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_23() {
        if (jj_scan_token(KEY_ESC_EXCL)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_22() {
        if (jj_scan_token(KEY_ESC_POUND)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_21() {
        if (jj_scan_token(KEY_ESC_COLON)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_20() {
        if (jj_scan_token(KEY_ESC_EQUAL)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_19() {
        if (jj_scan_token(KEY_ESC_TAB)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_18() {
        if (jj_scan_token(KEY_ESC_LF)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_17() {
        if (jj_scan_token(KEY_ESC_SPACE)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_16() {
        if (jj_scan_token(KEY_ESC_UNICODE)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_16() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_15()) {
            jj_scanpos = xsp;
            if (jj_3_16()) {
                jj_scanpos = xsp;
                if (jj_3_17()) {
                    jj_scanpos = xsp;
                    if (jj_3_18()) {
                        jj_scanpos = xsp;
                        if (jj_3_19()) {
                            jj_scanpos = xsp;
                            if (jj_3_20()) {
                                jj_scanpos = xsp;
                                if (jj_3_21()) {
                                    jj_scanpos = xsp;
                                    if (jj_3_22()) {
                                        jj_scanpos = xsp;
                                        if (jj_3_23()) {
                                            jj_scanpos = xsp;
                                            if (jj_3_24()) {
                                                jj_scanpos = xsp;
                                                if (jj_3_25()) {
                                                    return true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3_15() {
        if (jj_scan_token(KEY_ESC_BACKSLASH)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_13() {
        if (jj_3R_16()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_14() {
        if (jj_scan_token(KEY_OBRACKET)) {
            return true;
        }
        if (jj_scan_token(KEY_INTEGER)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_12() {
        if (jj_scan_token(KEY_DOT)) {
            return true;
        }
        Token xsp;
        if (jj_3_13()) {
            return true;
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_13()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_45() {
        if (jj_scan_token(COMMENT_EOL)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_11() {
        if (jj_3R_16()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_7() {
        if (jj_scan_token(VAL_EOL)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_8() {
        if (jj_3R_15()) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_7()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3R_18() {
        if (jj_scan_token(KEY_START)) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_11()) {
                jj_scanpos = xsp;
                break;
            }
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_12()) {
                jj_scanpos = xsp;
                break;
            }
        }
        xsp = jj_scanpos;
        if (jj_3_14()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3_6() {
        if (jj_scan_token(SEP_WHITESPACE)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_9() {
        if (jj_scan_token(KEY_SEPARATOR)) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_6()) {
                jj_scanpos = xsp;
                break;
            }
        }
        xsp = jj_scanpos;
        if (jj_3_8()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3_4() {
        if (jj_3R_14()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_47() {
        if (jj_scan_token(EOL)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_19() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_9()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3_44() {
        if (jj_scan_token(COMMENT_CHAR)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_10() {
        if (jj_scan_token(KEY_EOL)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_3() {
        if (jj_3R_13()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_5() {
        if (jj_scan_token(KEY_WHITESPACE)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_48() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_46()) {
            jj_scanpos = xsp;
            if (jj_3_47()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3_46() {
        if (jj_scan_token(WHITESPACE)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_14() {
        Token xsp;
        if (jj_3_48()) {
            return true;
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_48()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_12() {
        if (jj_3R_18()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_5()) {
                jj_scanpos = xsp;
                break;
            }
        }
        xsp = jj_scanpos;
        if (jj_3_10()) {
            jj_scanpos = xsp;
            if (jj_3R_19()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_13() {
        if (jj_scan_token(COMMENT_START)) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_44()) {
                jj_scanpos = xsp;
                break;
            }
        }
        xsp = jj_scanpos;
        if (jj_3_45()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3_1() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_2()) {
            jj_scanpos = xsp;
            if (jj_3_3()) {
                jj_scanpos = xsp;
                if (jj_3_4()) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3_2() {
        if (jj_3R_12()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_43() {
        if (jj_scan_token(VAL_CHAR)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_42() {
        if (jj_scan_token(VAL_WHITESPACE)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_41() {
        if (jj_scan_token(VAL_ESC_UNICODE)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_40() {
        if (jj_scan_token(VAL_ESC_MALFORMED)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_27() {
        if (jj_scan_token(SEP_VAL_START)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_39() {
        if (jj_scan_token(VAL_ESC_EXCL)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_38() {
        if (jj_scan_token(VAL_ESC_POUND)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_37() {
        if (jj_scan_token(VAL_ESC_COLON)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_36() {
        if (jj_scan_token(VAL_ESC_EQUAL)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_35() {
        if (jj_scan_token(VAL_ESC_TAB)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_34() {
        if (jj_scan_token(VAL_ESC_LF)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_33() {
        if (jj_scan_token(VAL_ESC_SPACE)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_17() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_32()) {
            jj_scanpos = xsp;
            if (jj_3_33()) {
                jj_scanpos = xsp;
                if (jj_3_34()) {
                    jj_scanpos = xsp;
                    if (jj_3_35()) {
                        jj_scanpos = xsp;
                        if (jj_3_36()) {
                            jj_scanpos = xsp;
                            if (jj_3_37()) {
                                jj_scanpos = xsp;
                                if (jj_3_38()) {
                                    jj_scanpos = xsp;
                                    if (jj_3_39()) {
                                        jj_scanpos = xsp;
                                        if (jj_3_40()) {
                                            jj_scanpos = xsp;
                                            if (jj_3_41()) {
                                                jj_scanpos = xsp;
                                                if (jj_3_42()) {
                                                    jj_scanpos = xsp;
                                                    if (jj_3_43()) {
                                                        return true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3_32() {
        if (jj_scan_token(VAL_ESC_BACKSLASH)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_30() {
        if (jj_3R_17()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_29() {
        if (jj_scan_token(VAL_WHITESPACE)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_31() {
        if (jj_scan_token(VAL_ESC_EOL)) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_29()) {
                jj_scanpos = xsp;
                break;
            }
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_30()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_28() {
        if (jj_3R_17()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_26() {
        if (jj_scan_token(VAL_START)) {
            return true;
        }
        return false;
    }

    /** Generated Token Manager. */
    public BootCfgParserTokenManager token_source;
    SimpleCharStream jj_input_stream;
    /** Current token. */
    public Token token;
    /** Next token. */
    public Token jj_nt;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    private int jj_gen;
    final private int[] jj_la1 = new int[0];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;

    static {
        jj_la1_init_0();
        jj_la1_init_1();
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{};
    }

    private static void jj_la1_init_1() {
        jj_la1_1 = new int[]{};
    }
    final private JJCalls[] jj_2_rtns = new JJCalls[48];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    /** Constructor with InputStream. */
    public BootCfgParser(java.io.InputStream stream) {
        this(stream, null);
    }

    /** Constructor with InputStream and supplied encoding */
    public BootCfgParser(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new BootCfgParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 0; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /** Constructor. */
    public BootCfgParser(java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new BootCfgParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /** Reinitialise. */
    public void ReInit(java.io.Reader stream) {
        if (jj_input_stream == null) {
            jj_input_stream = new SimpleCharStream(stream, 1, 1);
        } else {
            jj_input_stream.ReInit(stream, 1, 1);
        }
        if (token_source == null) {
            token_source = new BootCfgParserTokenManager(jj_input_stream);
        }

        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /** Constructor with generated Token Manager. */
    public BootCfgParser(BootCfgParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /** Reinitialise. */
    public void ReInit(BootCfgParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen) {
                            c.first = null;
                        }
                        c = c.next;
                    }
                }
            }
            trace_token(token, "");
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    @SuppressWarnings("serial")
    static private final class LookaheadSuccess extends java.lang.Error {
    }
    final private LookaheadSuccess jj_ls = new LookaheadSuccess();

    private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null) {
                jj_add_error_token(kind, i);
            }
        }
        if (jj_scanpos.kind != kind) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            throw jj_ls;
        }
        return false;
    }

    /** Get the next Token. */
    final public Token getNextToken() {
        if (token.next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        jj_gen++;
        trace_token(token, " (in getNextToken)");
        return token;
    }

    /** Get the specific Token. */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) {
                t = t.next;
            } else {
                t = t.next = token_source.getNextToken();
            }
        }
        return t;
    }

    private int jj_ntk_f() {
        if ((jj_nt = token.next) == null) {
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        } else {
            return (jj_ntk = jj_nt.kind);
        }
    }

    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) {
            return;
        }

        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];

            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }

            for (int[] oldentry : jj_expentries) {
                if (oldentry.length == jj_expentry.length) {
                    boolean isMatched = true;

                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            isMatched = false;
                            break;
                        }

                    }
                    if (isMatched) {
                        jj_expentries.add(jj_expentry);
                        break;
                    }
                }
            }

            if (pos != 0) {
                jj_lasttokens[(jj_endpos = pos) - 1] = kind;
            }
        }
    }

    /** Generate ParseException. */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[45];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 0; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 45; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    private int trace_indent = 0;
    private boolean trace_enabled = true;

    /** Enable tracing. */
    final public void enable_tracing() {
        trace_enabled = true;
    }

    /** Disable tracing. */
    final public void disable_tracing() {
        trace_enabled = false;
    }

    protected void trace_call(String s) {
        if (trace_enabled) {
            for (int i = 0; i < trace_indent; i++) {
                System.out.print(" ");
            }
            System.out.println("Call:   " + s);
        }
        trace_indent = trace_indent + 2;
    }

    protected void trace_return(String s) {
        trace_indent = trace_indent - 2;
        if (trace_enabled) {
            for (int i = 0; i < trace_indent; i++) {
                System.out.print(" ");
            }
            System.out.println("Return: " + s);
        }
    }

    protected void trace_token(Token t, String where) {
        if (trace_enabled) {
            for (int i = 0; i < trace_indent; i++) {
                System.out.print(" ");
            }
            System.out.print("Consumed token: <" + tokenImage[t.kind]);
            if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
                System.out.print(": \"" + TokenMgrError.addEscapes(t.image) + "\"");
            }
            System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
        }
    }

    protected void trace_scan(Token t1, int t2) {
        if (trace_enabled) {
            for (int i = 0; i < trace_indent; i++) {
                System.out.print(" ");
            }
            System.out.print("Visited token: <" + tokenImage[t1.kind]);
            if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
                System.out.print(": \"" + TokenMgrError.addEscapes(t1.image) + "\"");
            }
            System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
        }
    }

    private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 48; i++) {
            try {
                JJCalls p = jj_2_rtns[i];

                do {
                    if (p.gen > jj_gen) {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch (i) {
                            case 0:
                                jj_3_1();
                                break;
                            case 1:
                                jj_3_2();
                                break;
                            case 2:
                                jj_3_3();
                                break;
                            case 3:
                                jj_3_4();
                                break;
                            case 4:
                                jj_3_5();
                                break;
                            case 5:
                                jj_3_6();
                                break;
                            case 6:
                                jj_3_7();
                                break;
                            case 7:
                                jj_3_8();
                                break;
                            case 8:
                                jj_3_9();
                                break;
                            case 9:
                                jj_3_10();
                                break;
                            case 10:
                                jj_3_11();
                                break;
                            case 11:
                                jj_3_12();
                                break;
                            case 12:
                                jj_3_13();
                                break;
                            case 13:
                                jj_3_14();
                                break;
                            case 14:
                                jj_3_15();
                                break;
                            case 15:
                                jj_3_16();
                                break;
                            case 16:
                                jj_3_17();
                                break;
                            case 17:
                                jj_3_18();
                                break;
                            case 18:
                                jj_3_19();
                                break;
                            case 19:
                                jj_3_20();
                                break;
                            case 20:
                                jj_3_21();
                                break;
                            case 21:
                                jj_3_22();
                                break;
                            case 22:
                                jj_3_23();
                                break;
                            case 23:
                                jj_3_24();
                                break;
                            case 24:
                                jj_3_25();
                                break;
                            case 25:
                                jj_3_26();
                                break;
                            case 26:
                                jj_3_27();
                                break;
                            case 27:
                                jj_3_28();
                                break;
                            case 28:
                                jj_3_29();
                                break;
                            case 29:
                                jj_3_30();
                                break;
                            case 30:
                                jj_3_31();
                                break;
                            case 31:
                                jj_3_32();
                                break;
                            case 32:
                                jj_3_33();
                                break;
                            case 33:
                                jj_3_34();
                                break;
                            case 34:
                                jj_3_35();
                                break;
                            case 35:
                                jj_3_36();
                                break;
                            case 36:
                                jj_3_37();
                                break;
                            case 37:
                                jj_3_38();
                                break;
                            case 38:
                                jj_3_39();
                                break;
                            case 39:
                                jj_3_40();
                                break;
                            case 40:
                                jj_3_41();
                                break;
                            case 41:
                                jj_3_42();
                                break;
                            case 42:
                                jj_3_43();
                                break;
                            case 43:
                                jj_3_44();
                                break;
                            case 44:
                                jj_3_45();
                                break;
                            case 45:
                                jj_3_46();
                                break;
                            case 46:
                                jj_3_47();
                                break;
                            case 47:
                                jj_3_48();
                                break;
                        }
                    }
                    p = p.next;
                } while (p != null);

            } catch (LookaheadSuccess ls) {
            }
        }
        jj_rescan = false;
    }

    private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }

        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    static final class JJCalls {

        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}

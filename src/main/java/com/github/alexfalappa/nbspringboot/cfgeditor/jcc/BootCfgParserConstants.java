/* Generated By:JavaCC: Do not edit this line. BootCfgParserConstants.java */
package com.github.alexfalappa.nbspringboot.cfgeditor.jcc;

/**
 * Token literal values and constants. Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface BootCfgParserConstants {

    /** End of File. */
    int EOF = 0;
    /** RegularExpression Id. */
    int HEXDIGIT = 1;
    /** RegularExpression Id. */
    int WHITESPACE = 2;
    /** RegularExpression Id. */
    int EOL = 3;
    /** RegularExpression Id. */
    int COMMENT_START = 4;
    /** RegularExpression Id. */
    int COMMENT_CHAR = 5;
    /** RegularExpression Id. */
    int COMMENT_EOL = 6;
    /** RegularExpression Id. */
    int KEY_START = 7;
    /** RegularExpression Id. */
    int DIGIT = 8;
    /** RegularExpression Id. */
    int NONZERO_DIGIT = 9;
    /** RegularExpression Id. */
    int DIGITS = 10;
    /** RegularExpression Id. */
    int KEY_INTEGER = 11;
    /** RegularExpression Id. */
    int KEY_ESC_UNICODE = 12;
    /** RegularExpression Id. */
    int KEY_ESC_SPACE = 13;
    /** RegularExpression Id. */
    int KEY_ESC_LF = 14;
    /** RegularExpression Id. */
    int KEY_ESC_TAB = 15;
    /** RegularExpression Id. */
    int KEY_ESC_EQUAL = 16;
    /** RegularExpression Id. */
    int KEY_ESC_COLON = 17;
    /** RegularExpression Id. */
    int KEY_ESC_POUND = 18;
    /** RegularExpression Id. */
    int KEY_ESC_EXCL = 19;
    /** RegularExpression Id. */
    int KEY_ESC_BACKSLASH = 20;
    /** RegularExpression Id. */
    int KEY_DOT = 21;
    /** RegularExpression Id. */
    int KEY_OBRACKET = 22;
    /** RegularExpression Id. */
    int KEY_CBRACKET = 23;
    /** RegularExpression Id. */
    int KEY_SEPARATOR = 24;
    /** RegularExpression Id. */
    int KEY_CHAR = 25;
    /** RegularExpression Id. */
    int KEY_WHITESPACE = 26;
    /** RegularExpression Id. */
    int KEY_EOL = 27;
    /** RegularExpression Id. */
    int SEP_WHITESPACE = 28;
    /** RegularExpression Id. */
    int SEP_VAL_START = 29;
    /** RegularExpression Id. */
    int VAL_START = 30;
    /** RegularExpression Id. */
    int VAL_ESC_UNICODE = 31;
    /** RegularExpression Id. */
    int VAL_ESC_SPACE = 32;
    /** RegularExpression Id. */
    int VAL_ESC_EOL = 33;
    /** RegularExpression Id. */
    int VAL_ESC_EQUAL = 34;
    /** RegularExpression Id. */
    int VAL_ESC_COLON = 35;
    /** RegularExpression Id. */
    int VAL_ESC_POUND = 36;
    /** RegularExpression Id. */
    int VAL_ESC_EXCL = 37;
    /** RegularExpression Id. */
    int VAL_ESC_LF = 38;
    /** RegularExpression Id. */
    int VAL_ESC_TAB = 39;
    /** RegularExpression Id. */
    int VAL_ESC_BACKSLASH = 40;
    /** RegularExpression Id. */
    int VAL_ESC_MALFORMED = 41;
    /** RegularExpression Id. */
    int VAL_WHITESPACE = 42;
    /** RegularExpression Id. */
    int VAL_CHAR = 43;
    /** RegularExpression Id. */
    int VAL_EOL = 44;

    /** Lexical state. */
    int DEFAULT = 0;
    /** Lexical state. */
    int IN_COMMENT = 1;
    /** Lexical state. */
    int IN_KEY = 2;
    /** Lexical state. */
    int IN_SEP = 3;
    /** Lexical state. */
    int IN_VALUE = 4;

    /** Literal token values. */
    String[] tokenImage = {
        "<EOF>",
        "<HEXDIGIT>",
        "<WHITESPACE>",
        "<EOL>",
        "<COMMENT_START>",
        "<COMMENT_CHAR>",
        "<COMMENT_EOL>",
        "<KEY_START>",
        "<DIGIT>",
        "<NONZERO_DIGIT>",
        "<DIGITS>",
        "<KEY_INTEGER>",
        "<KEY_ESC_UNICODE>",
        "\"\\\\ \"",
        "\"\\\\n\"",
        "\"\\\\t\"",
        "\"\\\\=\"",
        "\"\\\\:\"",
        "\"\\\\#\"",
        "\"\\\\!\"",
        "\"\\\\\\\\\"",
        "\".\"",
        "\"[\"",
        "\"]\"",
        "<KEY_SEPARATOR>",
        "<KEY_CHAR>",
        "<KEY_WHITESPACE>",
        "<KEY_EOL>",
        "<SEP_WHITESPACE>",
        "<SEP_VAL_START>",
        "<VAL_START>",
        "<VAL_ESC_UNICODE>",
        "\"\\\\ \"",
        "<VAL_ESC_EOL>",
        "\"\\\\=\"",
        "\"\\\\:\"",
        "\"\\\\#\"",
        "\"\\\\!\"",
        "\"\\\\n\"",
        "\"\\\\t\"",
        "\"\\\\\\\\\"",
        "<VAL_ESC_MALFORMED>",
        "<VAL_WHITESPACE>",
        "<VAL_CHAR>",
        "<VAL_EOL>",};

}

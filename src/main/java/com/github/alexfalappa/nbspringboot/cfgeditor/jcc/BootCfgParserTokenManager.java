/* BootCfgParserTokenManager.java */
 /* Generated By:JavaCC: Do not edit this line. BootCfgParserTokenManager.java */
package com.github.alexfalappa.nbspringboot.cfgeditor.jcc;

/** Token Manager. */
@SuppressWarnings("unused")
public class BootCfgParserTokenManager implements BootCfgParserConstants {

    /** Debug output. */
    public java.io.PrintStream debugStream = System.out;

    /** Set debug output. */
    public void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    private int jjMoveStringLiteralDfa0_0() {
        return jjMoveNfa_0(0, 0);
    }
    static final long[] jjbitVec0 = {
        0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
    };

    private int jjMoveNfa_0(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 7;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff) {
                ReInitRounds();
            }
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0xdbfffff500000000L & l) != 0L) {
                                if (kind > 30) {
                                    kind = 30;
                                }
                            } else if ((0xa00000000L & l) != 0L) {
                                if (kind > 4) {
                                    kind = 4;
                                }
                            } else if ((0x2400L & l) != 0L) {
                                if (kind > 3) {
                                    kind = 3;
                                }
                            }
                            if ((0xdbfffff400000000L & l) != 0L) {
                                if (kind > 7) {
                                    kind = 7;
                                }
                            } else if ((0x100001200L & l) != 0L) {
                                if (kind > 2) {
                                    kind = 2;
                                }
                            } else if (curChar == 13) {
                                jjstateSet[jjnewStateCnt++] = 2;
                            }
                            break;
                        case 1:
                            if ((0x2400L & l) != 0L && kind > 3) {
                                kind = 3;
                            }
                            break;
                        case 2:
                            if (curChar == 10 && kind > 3) {
                                kind = 3;
                            }
                            break;
                        case 3:
                            if (curChar == 13) {
                                jjstateSet[jjnewStateCnt++] = 2;
                            }
                            break;
                        case 4:
                            if ((0xa00000000L & l) != 0L) {
                                kind = 4;
                            }
                            break;
                        case 5:
                            if ((0xdbfffff400000000L & l) != 0L && kind > 7) {
                                kind = 7;
                            }
                            break;
                        case 6:
                            if ((0xdbfffff500000000L & l) != 0L && kind > 30) {
                                kind = 30;
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if (kind > 30) {
                                kind = 30;
                            }
                            if (kind > 7) {
                                kind = 7;
                            }
                            break;
                        case 5:
                            if (kind > 7) {
                                kind = 7;
                            }
                            break;
                        case 6:
                            if (kind > 30) {
                                kind = 30;
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((jjbitVec0[i2] & l2) != 0L) {
                                if (kind > 7) {
                                    kind = 7;
                                }
                            }
                            if ((jjbitVec0[i2] & l2) != 0L) {
                                if (kind > 30) {
                                    kind = 30;
                                }
                            }
                            break;
                        case 5:
                            if ((jjbitVec0[i2] & l2) != 0L && kind > 7) {
                                kind = 7;
                            }
                            break;
                        case 6:
                            if ((jjbitVec0[i2] & l2) != 0L && kind > 30) {
                                kind = 30;
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 7 - (jjnewStateCnt = startsAt))) {
                return curPos;
            }
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private int jjMoveStringLiteralDfa0_3() {
        return jjMoveNfa_3(0, 0);
    }

    private int jjMoveNfa_3(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 2;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff) {
                ReInitRounds();
            }
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0xdbfffff400000000L & l) != 0L) {
                                if (kind > 29) {
                                    kind = 29;
                                }
                            } else if ((0x100001200L & l) != 0L) {
                                if (kind > 28) {
                                    kind = 28;
                                }
                            }
                            break;
                        case 1:
                            if ((0xdbfffff400000000L & l) != 0L) {
                                kind = 29;
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            kind = 29;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((jjbitVec0[i2] & l2) != 0L && kind > 29) {
                                kind = 29;
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt))) {
                return curPos;
            }
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private final int jjStopStringLiteralDfa_2(int pos, long active0) {
        switch (pos) {
            case 0:
                if ((active0 & 0x1fe000L) != 0L) {
                    return 3;
                }
                return -1;
            default:
                return -1;
        }
    }

    private final int jjStartNfa_2(int pos, long active0) {
        return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
    }

    private int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private int jjMoveStringLiteralDfa0_2() {
        switch (curChar) {
            case 46:
                return jjStopAtPos(0, 21);
            case 91:
                return jjStopAtPos(0, 22);
            case 92:
                return jjMoveStringLiteralDfa1_2(0x1fe000L);
            case 93:
                return jjStopAtPos(0, 23);
            default:
                return jjMoveNfa_2(0, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_2(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_2(0, active0);
            return 1;
        }
        switch (curChar) {
            case 32:
                if ((active0 & 0x2000L) != 0L) {
                    return jjStopAtPos(1, 13);
                }
                break;
            case 33:
                if ((active0 & 0x80000L) != 0L) {
                    return jjStopAtPos(1, 19);
                }
                break;
            case 35:
                if ((active0 & 0x40000L) != 0L) {
                    return jjStopAtPos(1, 18);
                }
                break;
            case 58:
                if ((active0 & 0x20000L) != 0L) {
                    return jjStopAtPos(1, 17);
                }
                break;
            case 61:
                if ((active0 & 0x10000L) != 0L) {
                    return jjStopAtPos(1, 16);
                }
                break;
            case 92:
                if ((active0 & 0x100000L) != 0L) {
                    return jjStopAtPos(1, 20);
                }
                break;
            case 110:
                if ((active0 & 0x4000L) != 0L) {
                    return jjStopAtPos(1, 14);
                }
                break;
            case 116:
                if ((active0 & 0x8000L) != 0L) {
                    return jjStopAtPos(1, 15);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_2(0, active0);
    }

    private int jjMoveNfa_2(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 15;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff) {
                ReInitRounds();
            }
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0xd800bffeffffc9ffL & l) != 0L) {
                                if (kind > 25) {
                                    kind = 25;
                                }
                            } else if ((0x3ff000000000000L & l) != 0L) {
                                if (kind > 11) {
                                    kind = 11;
                                }
                            } else if ((0x100001200L & l) != 0L) {
                                if (kind > 26) {
                                    kind = 26;
                                }
                            } else if ((0x2400L & l) != 0L) {
                                if (kind > 27) {
                                    kind = 27;
                                }
                            } else if ((0x2400000000000000L & l) != 0L) {
                                if (kind > 24) {
                                    kind = 24;
                                }
                            }
                            if ((0x3fe000000000000L & l) != 0L) {
                                jjCheckNAdd(2);
                            } else if (curChar == 13) {
                                jjstateSet[jjnewStateCnt++] = 13;
                            }
                            break;
                        case 1:
                            if ((0x3fe000000000000L & l) != 0L) {
                                jjCheckNAdd(2);
                            }
                            break;
                        case 2:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 11) {
                                kind = 11;
                            }
                             {
                                jjCheckNAdd(2);
                            }
                            break;
                        case 4:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 5;
                            }
                            break;
                        case 5:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 6;
                            }
                            break;
                        case 6:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 7;
                            }
                            break;
                        case 7:
                            if ((0x3ff000000000000L & l) != 0L && kind > 12) {
                                kind = 12;
                            }
                            break;
                        case 9:
                            if ((0x2400000000000000L & l) != 0L) {
                                kind = 24;
                            }
                            break;
                        case 10:
                            if ((0xd800bffeffffc9ffL & l) != 0L) {
                                kind = 25;
                            }
                            break;
                        case 11:
                            if ((0x100001200L & l) != 0L) {
                                kind = 26;
                            }
                            break;
                        case 12:
                            if ((0x2400L & l) != 0L && kind > 27) {
                                kind = 27;
                            }
                            break;
                        case 13:
                            if (curChar == 10 && kind > 27) {
                                kind = 27;
                            }
                            break;
                        case 14:
                            if (curChar == 13) {
                                jjstateSet[jjnewStateCnt++] = 13;
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0xffffffffc7ffffffL & l) != 0L) {
                                if (kind > 25) {
                                    kind = 25;
                                }
                            } else if (curChar == 92) {
                                jjstateSet[jjnewStateCnt++] = 3;
                            }
                            break;
                        case 3:
                            if (curChar == 117) {
                                jjstateSet[jjnewStateCnt++] = 4;
                            }
                            break;
                        case 4:
                            if ((0x7e0000007eL & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 5;
                            }
                            break;
                        case 5:
                            if ((0x7e0000007eL & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 6;
                            }
                            break;
                        case 6:
                            if ((0x7e0000007eL & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 7;
                            }
                            break;
                        case 7:
                            if ((0x7e0000007eL & l) != 0L && kind > 12) {
                                kind = 12;
                            }
                            break;
                        case 8:
                            if (curChar == 92) {
                                jjstateSet[jjnewStateCnt++] = 3;
                            }
                            break;
                        case 10:
                            if ((0xffffffffc7ffffffL & l) != 0L && kind > 25) {
                                kind = 25;
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((jjbitVec0[i2] & l2) != 0L && kind > 25) {
                                kind = 25;
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 15 - (jjnewStateCnt = startsAt))) {
                return curPos;
            }
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private final int jjStopStringLiteralDfa_4(int pos, long active0) {
        switch (pos) {
            case 0:
                if ((active0 & 0x1fd00000000L) != 0L) {
                    return 8;
                }
                return -1;
            default:
                return -1;
        }
    }

    private final int jjStartNfa_4(int pos, long active0) {
        return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0), pos + 1);
    }

    private int jjMoveStringLiteralDfa0_4() {
        switch (curChar) {
            case 92:
                return jjMoveStringLiteralDfa1_4(0x1fd00000000L);
            default:
                return jjMoveNfa_4(0, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_4(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_4(0, active0);
            return 1;
        }
        switch (curChar) {
            case 32:
                if ((active0 & 0x100000000L) != 0L) {
                    return jjStopAtPos(1, 32);
                }
                break;
            case 33:
                if ((active0 & 0x2000000000L) != 0L) {
                    return jjStopAtPos(1, 37);
                }
                break;
            case 35:
                if ((active0 & 0x1000000000L) != 0L) {
                    return jjStopAtPos(1, 36);
                }
                break;
            case 58:
                if ((active0 & 0x800000000L) != 0L) {
                    return jjStopAtPos(1, 35);
                }
                break;
            case 61:
                if ((active0 & 0x400000000L) != 0L) {
                    return jjStopAtPos(1, 34);
                }
                break;
            case 92:
                if ((active0 & 0x10000000000L) != 0L) {
                    return jjStopAtPos(1, 40);
                }
                break;
            case 110:
                if ((active0 & 0x4000000000L) != 0L) {
                    return jjStopAtPos(1, 38);
                }
                break;
            case 116:
                if ((active0 & 0x8000000000L) != 0L) {
                    return jjStopAtPos(1, 39);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_4(0, active0);
    }

    private int jjMoveNfa_4(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 16;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff) {
                ReInitRounds();
            }
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0xdbfffffeffffc9ffL & l) != 0L) {
                                if (kind > 43) {
                                    kind = 43;
                                }
                            } else if ((0x100001200L & l) != 0L) {
                                if (kind > 42) {
                                    kind = 42;
                                }
                            } else if ((0x2400L & l) != 0L) {
                                if (kind > 44) {
                                    kind = 44;
                                }
                            }
                            if (curChar == 13) {
                                jjstateSet[jjnewStateCnt++] = 5;
                            }
                            break;
                        case 8:
                            if (kind > 41) {
                                kind = 41;
                            }
                            if (curChar == 13) {
                                jjstateSet[jjnewStateCnt++] = 13;
                            } else if (curChar == 10) {
                                if (kind > 33) {
                                    kind = 33;
                                }
                            }
                            if (curChar == 13) {
                                if (kind > 33) {
                                    kind = 33;
                                }
                            }
                            break;
                        case 1:
                            if (kind > 41) {
                                kind = 41;
                            }
                            break;
                        case 2:
                            if ((0x100001200L & l) != 0L && kind > 42) {
                                kind = 42;
                            }
                            break;
                        case 3:
                            if ((0xdbfffffeffffc9ffL & l) != 0L && kind > 43) {
                                kind = 43;
                            }
                            break;
                        case 4:
                            if ((0x2400L & l) != 0L && kind > 44) {
                                kind = 44;
                            }
                            break;
                        case 5:
                            if (curChar == 10 && kind > 44) {
                                kind = 44;
                            }
                            break;
                        case 6:
                            if (curChar == 13) {
                                jjstateSet[jjnewStateCnt++] = 5;
                            }
                            break;
                        case 9:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 10;
                            }
                            break;
                        case 10:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 11;
                            }
                            break;
                        case 11:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 12;
                            }
                            break;
                        case 12:
                            if ((0x3ff000000000000L & l) != 0L && kind > 31) {
                                kind = 31;
                            }
                            break;
                        case 13:
                            if (curChar == 10 && kind > 33) {
                                kind = 33;
                            }
                            break;
                        case 14:
                            if (curChar == 13 && kind > 33) {
                                kind = 33;
                            }
                            break;
                        case 15:
                            if (curChar == 13) {
                                jjstateSet[jjnewStateCnt++] = 13;
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0xffffffffefffffffL & l) != 0L) {
                                if (kind > 43) {
                                    kind = 43;
                                }
                            } else if (curChar == 92) {
                                jjAddStates(0, 3);
                            }
                            if (curChar == 92) {
                                jjstateSet[jjnewStateCnt++] = 1;
                            }
                            break;
                        case 8:
                            if ((0xffcfbfffffffffffL & l) != 0L) {
                                if (kind > 41) {
                                    kind = 41;
                                }
                            } else if (curChar == 117) {
                                jjstateSet[jjnewStateCnt++] = 9;
                            }
                            break;
                        case 1:
                            if ((0xffcfbfffffffffffL & l) != 0L && kind > 41) {
                                kind = 41;
                            }
                            break;
                        case 3:
                            if ((0xffffffffefffffffL & l) != 0L && kind > 43) {
                                kind = 43;
                            }
                            break;
                        case 7:
                            if (curChar == 92) {
                                jjAddStates(0, 3);
                            }
                            break;
                        case 9:
                            if ((0x7e0000007eL & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 10;
                            }
                            break;
                        case 10:
                            if ((0x7e0000007eL & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 11;
                            }
                            break;
                        case 11:
                            if ((0x7e0000007eL & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 12;
                            }
                            break;
                        case 12:
                            if ((0x7e0000007eL & l) != 0L && kind > 31) {
                                kind = 31;
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((jjbitVec0[i2] & l2) != 0L && kind > 43) {
                                kind = 43;
                            }
                            break;
                        case 8:
                            if ((jjbitVec0[i2] & l2) != 0L && kind > 41) {
                                kind = 41;
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 16 - (jjnewStateCnt = startsAt))) {
                return curPos;
            }
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private int jjMoveStringLiteralDfa0_1() {
        return jjMoveNfa_1(0, 0);
    }

    private int jjMoveNfa_1(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 4;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff) {
                ReInitRounds();
            }
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0xffffffffffffdbffL & l) != 0L) {
                                if (kind > 5) {
                                    kind = 5;
                                }
                            } else if ((0x2400L & l) != 0L) {
                                if (kind > 6) {
                                    kind = 6;
                                }
                            }
                            if (curChar == 13) {
                                jjstateSet[jjnewStateCnt++] = 2;
                            }
                            break;
                        case 1:
                            if ((0x2400L & l) != 0L && kind > 6) {
                                kind = 6;
                            }
                            break;
                        case 2:
                            if (curChar == 10 && kind > 6) {
                                kind = 6;
                            }
                            break;
                        case 3:
                            if (curChar == 13) {
                                jjstateSet[jjnewStateCnt++] = 2;
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            kind = 5;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((jjbitVec0[i2] & l2) != 0L && kind > 5) {
                                kind = 5;
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt))) {
                return curPos;
            }
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }
    static final int[] jjnextStates = {
        8, 13, 14, 15,};

    /** Token literal values. */
    public static final String[] jjstrLiteralImages = {
        "", null, null, null, null, null, null, null, null, null, null, null, null,
        "\134\40", "\134\156", "\134\164", "\134\75", "\134\72", "\134\43", "\134\41",
        "\134\134", "\56", "\133", "\135", null, null, null, null, null, null, null, null,
        "\134\40", null, "\134\75", "\134\72", "\134\43", "\134\41", "\134\156", "\134\164",
        "\134\134", null, null, null, null,};

    protected Token jjFillToken() {
        final Token t;
        final String curTokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        String im = jjstrLiteralImages[jjmatchedKind];
        curTokenImage = (im == null) ? input_stream.GetImage() : im;
        beginLine = input_stream.getBeginLine();
        beginColumn = input_stream.getBeginColumn();
        endLine = input_stream.getEndLine();
        endColumn = input_stream.getEndColumn();
        t = Token.newToken(jjmatchedKind, curTokenImage);

        t.beginLine = beginLine;
        t.endLine = endLine;
        t.beginColumn = beginColumn;
        t.endColumn = endColumn;

        return t;
    }

    int curLexState = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    /** Get the next Token. */
    public Token getNextToken() {
        Token matchedToken;
        int curPos = 0;

        EOFLoop:
        for (;;) {
            try {
                curChar = input_stream.BeginToken();
            } catch (Exception e) {
                jjmatchedKind = 0;
                jjmatchedPos = -1;
                matchedToken = jjFillToken();
                return matchedToken;
            }

            switch (curLexState) {
                case 0:
                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_0();
                    break;
                case 1:
                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_1();
                    break;
                case 2:
                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_2();
                    break;
                case 3:
                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_3();
                    break;
                case 4:
                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_4();
                    break;
            }
            if (jjmatchedKind != 0x7fffffff) {
                if (jjmatchedPos + 1 < curPos) {
                    input_stream.backup(curPos - jjmatchedPos - 1);
                }
                matchedToken = jjFillToken();
                if (jjnewLexState[jjmatchedKind] != -1) {
                    curLexState = jjnewLexState[jjmatchedKind];
                }
                return matchedToken;
            }
            int error_line = input_stream.getEndLine();
            int error_column = input_stream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;
            try {
                input_stream.readChar();
                input_stream.backup(1);
            } catch (java.io.IOException e1) {
                EOFSeen = true;
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
                if (curChar == '\n' || curChar == '\r') {
                    error_line++;
                    error_column = 0;
                } else {
                    error_column++;
                }
            }
            if (!EOFSeen) {
                input_stream.backup(1);
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
            }
            throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
        }
    }

    private void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    private void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    /** Constructor. */
    public BootCfgParserTokenManager(SimpleCharStream stream) {

        if (SimpleCharStream.staticFlag) {
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
        }

        input_stream = stream;
    }

    /** Constructor. */
    public BootCfgParserTokenManager(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /** Reinitialise parser. */
    public void ReInit(SimpleCharStream stream) {

        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    private void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 16; i-- > 0;) {
            jjrounds[i] = 0x80000000;
        }
    }

    /** Reinitialise parser. */
    public void ReInit(SimpleCharStream stream, int lexState) {

        ReInit(stream);
        SwitchTo(lexState);
    }

    /** Switch to specified lex state. */
    public void SwitchTo(int lexState) {
        if (lexState >= 5 || lexState < 0) {
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
                    TokenMgrError.INVALID_LEXICAL_STATE);
        } else {
            curLexState = lexState;
        }
    }

    /** Lexer state names. */
    public static final String[] lexStateNames = {
        "DEFAULT",
        "IN_COMMENT",
        "IN_KEY",
        "IN_SEP",
        "IN_VALUE",};

    /** Lex State array. */
    public static final int[] jjnewLexState = {
        -1, -1, -1, -1, 1, -1, 0, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3,
        -1, -1, 0, -1, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0,};
    protected SimpleCharStream input_stream;

    private final int[] jjrounds = new int[16];
    private final int[] jjstateSet = new int[2 * 16];

    protected int curChar;
}
